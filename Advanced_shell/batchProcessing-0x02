#!/bin/bash

# Define the list of Pokémon
pokemon_list=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base URL for the Pokémon API
base_url="https://pokeapi.co/api/v2/pokemon"

# Delay between API requests (in seconds)
delay=2

# Retry configuration
max_retries=3
retry_delay=5  # seconds between retries

# Function to make API request with retries
fetch_data() {
  local pokemon=$1
  local retries=0

  while [ $retries -lt $max_retries ]; do
    # Construct the API URL
    local api_url="$base_url/$pokemon"
    echo "Fetching data for $pokemon... Attempt $((retries + 1)) of $max_retries"

    # Fetch the data using curl and check for success
    response=$(curl -s --fail "$api_url")
    
    if [[ $? -eq 0 && -n "$response" ]]; then
      echo "$response"  # Return the successful response
      return 0
    else
      echo "Error: Failed to fetch data for $pokemon. Retrying in $retry_delay seconds..."
      retries=$((retries + 1))
      sleep $retry_delay
    fi
  done

  echo "Error: Failed to fetch data for $pokemon after $max_retries attempts."
  return 1  # Return failure after exhausting retries
}

# Loop through each Pokémon in the list
for pokemon in "${pokemon_list[@]}"; do
  # Convert the Pokémon name to lowercase to match API requirements
  pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')

  # Attempt to fetch data for the current Pokémon
  response=$(fetch_data "$pokemon_lower")

  # If data is successfully fetched, save it to a file
  if [ $? -eq 0 ]; then
    output_file="${pokemon_lower}.json"
    echo "$response" > "$output_file"
    echo "Data for $pokemon saved to $output_file."
  else
    echo "Skipping $pokemon due to previous errors."
  fi

  # Wait to avoid hitting rate limits
  echo "Waiting for $delay seconds before the next request..."
  sleep $delay
done

echo "All Pokémon data fetch attempt completed."
